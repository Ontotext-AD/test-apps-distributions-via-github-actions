# This is a basic workflow to help you get started with Actions

name: Ontotext Demo App Release Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      project-version:
        required: true
        type: string

env:
  JAVA_11_VERSION: '11.0.17+8'
  JAVA_17_VERSION: '17.0.3+7'
  JAVA_DISTRO: 'temurin'
  NODE_VERSION: 16

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest, windows-latest]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Ontotext Demo App Repository
        uses: actions/checkout@v3
        with:
          repository: 'git@gitlab.ontotext.com:antoniy.kunchev/demo-app.git'
          ref: 'main'

      - name: Set up Java ${{ env.JAVA_DISTRO }}-${{ env.JAVA_11_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_11_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      # TODO: do we need that? Perhaps for the Refine it will be useful
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Not needed for this application, but it will be for the Refine
      - name: Setup node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - run: npm test

      - name: Build project
        run: |
          mvn clean install

      - name: Run JLink - ${{ runner.os }}
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: |
          cd /packaging
          bash link-native-unix.sh

      - name: Run JLink - Windows
        if: runner.os == 'Windows'
        run: |
          cd /packaging
          ./link-native-windows.cmd

      - name: Set up Java ${{ env.JAVA_DISTRO }}-${{ env.JAVA_17_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_17_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Build Linux Native
        if: runner.os == 'Linux'
        run: |
          cd /packaging
          bash build-native-linux.sh

      - name: Build MacOS Native
        if: runner.os == 'macOS'
        run: |
          cd /packaging
          bash build-native-mac.sh

      - name: Build Windows Native
        if: runner.os == 'Windows'
        run: |
          cd /packaging
          ./build-native-windows.cmd

      - name: Upload Installers
        uses: actions/upload-artifact@v3
        with:
          retention-days: 5
          if-no-files-found: warn
          path: |
            #target/packages/*.pkg
            #target/packages/*.msi
            target/packages/*.deb
            target/packages/*.rpm
